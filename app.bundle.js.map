{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;;;;AClFA,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;AAElC,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAsB,CAAC;AAC1E,MAAM,GAAG,GAAG,kCAAkC,CAAC;AAY/C,QAAQ,CAAC,gBAAgB,CAAC,MAAM,EAAE;;QAChC,IAAI,GAAG,CAAC;QACR,IAAI;YACF,GAAG,GAAG,MAAM,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;SACzE;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,OAAO;SACR;QAED,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,qCAAqC,CAAC,CAAC;QAC7E,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEjB,iDAAiD;QACjD,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;QAC5C,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QACjC,MAAM,CAAC,KAAK,EAAE,CAAC;QAEf,0IAA0I;QAC1I,qHAAqH;QACrH,qEAAqE;QAErE,iGAAiG;QACjG,SAAS,GAAG;YACV,IAAI,CAAC,MAAM,GAAG;gBACZ,MAAM,EAAE,CAAC;gBACT,MAAM,EAAE,CAAC;aACV,CAAC;YAEF,IAAI,CAAC,OAAO,GAAG;gBACb,GAAG,EAAE,CAAC;aACP,CAAC;YAEF,2CAA2C;YAC3C,IAAI,CAAC,eAAe,GAAG;gBACrB,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAC7D,CAAC,CAAC;QACJ,CAAC;QAED,8EAA8E;QAC9E,SAAS,UAAU;YACjB,OAAO,IAAI,GAAG,EAAE,CAAC;QACnB,CAAC;QAED,qEAAqE;QACrE,IAAI,IAAI,GAAG,UAAU,EAAE,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAE9B,wDAAwD;QACxD,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QAEtC,sHAAsH;QACtH,IAAI,IAAI,GAAG,MAAM,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;QACxC,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAErC,8FAA8F;QAC9F,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACnC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAEnC,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACxB,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAExB,kHAAkH;QAClH,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,KAAK,CAAC,eAAe,EAAE,CAAC;QAExB,OAAO,CAAC,GAAG,CACP,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,EACjC,qCAAqC,CACxC,CAAC;QAGF,sHAAsH;QAEtH,SAAS,iBAAiB;YACxB,IAAI,SAAS,GAAG,EAAE,CAAC;YACnB,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,gBAAgB;gBAC3D,SAAS,GAAG;oBACV,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBAC3B,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBAC3B,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBAC3B,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBACzB,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBACzB,gBAAgB,CAAC,MAAM,CAAC,CAAC;iBAE1B,CAAC;gBACF,wBAAwB;YAC1B,CAAC,CAAC,CAAC;YAEH,OAAO,SAAS,CAAC;QACnB,CAAC;QACH,wHAAwH;QAGtH,SAAS,GAAG;YACV,IAAI,CAAC,MAAM,GAAG;gBACZ,OAAO,EAAE,IAAI;aAEd,CAAC;YAEF,IAAI,CAAC,MAAM,GAAG;gBACZ,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;gBAC/B,IAAI,QAAQ,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,iBAAiB,EAAE,CAAC;gBAC9C,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBACjD,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACnD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC/B,CAAC,CAAC;YAEF,IAAI,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,IAAI;gBACjC;;;mBAGG;YACL,CAAC,CAAC;YAEF,IAAI,CAAC,eAAe,GAAG,UAAU,QAAQ,IAAG,CAAC,CAAC;YAE9C,IAAI,CAAC,MAAM,GAAG,UAAU,SAAS,IAAG,CAAC,CAAC;YAEtC,IAAI,CAAC,SAAS,GAAG;gBACf,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YAC1B,CAAC,CAAC;QACJ,CAAC;QAED,SAAS,UAAU;YACjB,OAAO,IAAI,GAAG,EAAE,CAAC;QACnB,CAAC;QAED,qBAAqB;QACrB,qBAAqB;QACrB,0BAA0B;QAI5B,wGAAwG;QACtG,6EAA6E;QAC/E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAqG6C;QAE7C,wGAAwG;QAGxG,8HAA8H;QAI9H,iGAAiG;QAEjG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAwC6C;QAG7C,6HAA6H;QAG7H,oFAAoF;QAClF,qFAAqF;QAErF,IAAI,eAAe,GAAG,EAAE,CAAC;QAEzB,SAAS,OAAO;YACd,IAAI,CAAC,MAAM,GAAG;gBACZ,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,OAAO;gBACd,OAAO,EAAE,CAAC;aACX,CAAC;YAEF,IAAI,CAAC,MAAM,GAAG;gBACZ,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;gBACjC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACzD,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YAC9C,CAAC;YAED,IAAI,CAAC,MAAM,GAAG;gBACZ,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;gBACjC,gDAAgD;gBAChD,IAAI,QAAQ,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;gBAGjE;;;;;kBAKE;gBAEI,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,mBAAmB,EAAE,CAAC;gBAChD,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACzD,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;gBACjC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;gBAE5C,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACnD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;gBAE7B;;;;;;;;;;;;;;;;;;;qBAmBK;YACP,CAAC,CAAC;YACF,IAAI,CAAC,OAAO,GAAG,UAAU,SAAiB;gBACxC,oDAAoD;gBACrD,oCAAoC;gBAEnC,cAAc;gBAGd;;;;;;;;;;mBAUG;gBAET;;;;;;;;yBAQS;gBAEH,kBAAkB;gBAClB,IAAI,SAAS,IAAI,kBAAkB,EAAE;oBACnC,gBAAgB;oBAChB,IAAI,SAAS,GAAG,iBAAiB,EAAE,CAAC;oBACpC,yBAAyB;oBACzB,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC5D,eAAe,GAAG,SAAS,CAAC;iBAC7B;YACH,CAAC,CAAC;YAEF,IAAI,CAAC,MAAM,GAAG,UAAU,SAAS,IAAG,CAAC,CAAC;QAExC,CAAC;QAGD,SAAS,WAAW;YAClB,OAAO,IAAI,OAAO,EAAE,CAAC;QACvB,CAAC;QACD,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAEzC,MAAM,SAAS,GAAG,MAAM,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;QAE/C,MAAM,OAAO,GAAG,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAChD,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC;QAC3C,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;QAC1C,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC;QAE3C,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;QACxC,OAAO,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;QAC3B,SAAS,CAAC,KAAK,EAAE,CAAC;QAClB,2BAA2B;QAC7B,sGAAsG;QAKtG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAgFG;QACH,8HAA8H;QAC5H,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,IAAI,aAAa,GAAG,EAAE,CAAC;QACvB,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,IAAI,iBAAiB,GAAG,CAAC,CAAC;QAG1B,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,OAAO,GAAG,SAAe,OAAO;;gBAElE,aAAa,CAAC,SAAS,CAAC,GAAG,MAAM,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;gBACxD,SAAS,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,EAAE;oBAC3F,GAAG,EAAE,2BAA2B;iBACjC,CAAC,CAAC;gBAEH,SAAS,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG;oBACvC,CAAC,EAAE,KAAK;oBACR,CAAC,EAAE,KAAK;oBACR,CAAC,EAAE,KAAK;iBACT,CAAC;gBAEF,aAAa,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvF,SAAS,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC;gBACxD,SAAS,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;gBACvD,SAAS,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC;gBACxD,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,GAAG,SAAS,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;gBACvC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;gBAGlC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,GAAG,UAAU,SAAiB;oBACxD,IAAI,SAAS,IAAI,mBAAmB,EAAE;wBACpC,iBAAiB,GAAG,YAAY,CAAC;wBACjC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;wBAC/B,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC;wBACzB,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;wBACzB,yBAAyB;wBACzB,8CAA8C;qBAC/C;oBAED,IAAI,SAAS,IAAI,kBAAkB,EAAE;wBACnC,IAAI,SAAS,GAAG,iBAAiB,EAAE,CAAC;wBAEpC,IAAG,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,IAAK,CAAC,CAAC,EAC3C;4BACE,aAAa,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;yBAE7D;wBAED,IAAG,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EACpB;4BACE,aAAa,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;yBAC9E;wBAGD,IAAG,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,IAAK,CAAC,CAAC,EAC3C;4BACE,aAAa,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;yBAC7D;wBAGD,2CAA2C;wBAC3C,wBAAwB;wBAExB,yBAAyB;wBACzB,0BAA0B;wBAC3B,iFAAiF;qBACjF;gBAEH,CAAC,CAAC;gBAMF,aAAa,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,CAAC;gBACjC,SAAS,EAAE,CAAC;YAEd,CAAC;SAAA;QAGD,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,OAAO,GAAG,SAAe,UAAU;;gBACrE,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;gBACtB,aAAa,CAAC,YAAY,CAAC,CAAC,IAAI,EAAE,CAAC;gBACnC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;YAExB,CAAC;SAAA;QAED,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,OAAO,GAAG,SAAe,UAAU;;gBACtE,aAAa,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC;YAC3D,CAAC;SAAA;QAED,+HAA+H;QACjI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA6DE;QAGA,yCAAyC;QACzC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QAEtC,0DAA0D;QAC1D,kCAAkC;QACnC;;;qDAG6C;QAC5C,mDAAmD;QACpD,gDAAgD;QAI/C,6CAA6C;QAE/C;;;;;yBAKiB;QACf,4EAA4E;QAC5E,wCAAwC;QACxC,2DAA2D;QAC3D,8BAA8B;QAC/B;;;;;;;;;;;;cAYM;QAEP;;eAEO;QAEP;;;;UAIE;QAEA,4CAA4C;QAE5C,mFAAmF;QAEnF,uCAAuC;QACvC,iCAAiC;QAEnC;;;;;;UAME;QACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA8DE;QAEF;;;;;;;;;;cAUM;QACN;;;;;;;;;;;cAWM;QAEJ,sCAAsC;QACtC,0BAA0B;QAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAgLE;QAGA,MAAM,IAAI,GAAG;YACX,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAC5B,6BAA6B;YAC7B,mBAAmB;YACrB,gBAAgB;YAChB,oBAAoB;QACpB,CAAC,CAAC;QACF,IAAI,EAAE,CAAC;IACT,CAAC;CAAA,CAAC,CAAC","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","console.log(\"RUNNING RIGHT NOW2\");\r\n\r\nconst showcase = document.getElementById(\"showcase\") as HTMLIFrameElement;\r\nconst key = \"96296aaaf1964968ad92128f7469bd99\";\r\n\r\n// declare this file is a module\r\nexport {};\r\n\r\n// augment window with the MP_SDK property\r\ndeclare global {\r\n  interface Window {\r\n    MP_SDK: any;\r\n  }\r\n}\r\n\r\nshowcase.addEventListener(\"load\", async function () {\r\n  let sdk;\r\n  try {\r\n    sdk = await showcase.contentWindow.MP_SDK.connect(showcase, key, \"3.2\");\r\n  } catch (e) {\r\n    console.error(e);\r\n    return;\r\n  }\r\n\r\n  console.log(\"%c  Hello Bundle SDK! \", \"background: #333333; color: #00dd00\");\r\n  console.log(sdk);\r\n\r\n  //This allows for what we add to actually be seen\r\n  const lights = await sdk.Scene.createNode();\r\n  lights.addComponent(\"mp.lights\");\r\n  lights.start();\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //This is the Sum() example from the matterport.github.io page. This displays how to bind component inputs to outputs\r\n  //This is the architecture for defining, adding, and using components\r\n\r\n  //Define the component. I am not sure why it must be in the form of a function instead of a class\r\n  function Sum() {\r\n    this.inputs = {\r\n      augend: 0,\r\n      addend: 0,\r\n    };\r\n\r\n    this.outputs = {\r\n      sum: 0,\r\n    };\r\n\r\n    // if any input changes, recompute the sum.\r\n    this.onInputsUpdated = function () {\r\n      this.outputs.sum = this.inputs.augend + this.inputs.addend;\r\n    };\r\n  }\r\n\r\n  //This is the function that returns the new component. Necessary for adding it\r\n  function SumFactory() {\r\n    return new Sum();\r\n  }\r\n\r\n  //Quick display of the general structure and use of the sum component\r\n  var sum1 = SumFactory();\r\n  sum1.inputs.augend = 1;\r\n  sum1.inputs.addend = 99;\r\n  sum1.onInputsUpdated();\r\n  console.log(sum1.outputs.sum);\r\n\r\n  //This is how you register the component to add it later\r\n  sdk.Scene.register(\"sum\", SumFactory);\r\n\r\n  //This is how you add the component. Create a node and then add components. The components need to be in the same node\r\n  var node = await sdk.Scene.createNode();\r\n  var comp1 = node.addComponent(\"sum\");\r\n  var comp2 = node.addComponent(\"sum\");\r\n  var comp3 = node.addComponent(\"sum\");\r\n\r\n  // This binds comp2's augend to comp1's sum. The order of arguments can be a little confusing.\r\n  comp1.bind(\"augend\", comp2, \"sum\");\r\n  comp1.bind(\"addend\", comp3, \"sum\");\r\n\r\n  node.start();\r\n\r\n  comp2.inputs.augend = 5;\r\n  comp3.inputs.addend = 6;\r\n\r\n  //This is necessary and the order is important. The highest component in the architecture needs to be called alst.\r\n  comp2.onInputsUpdated();\r\n  comp3.onInputsUpdated();\r\n  comp1.onInputsUpdated();\r\n\r\n  console.log(\r\n      \"%c  \" + comp1.outputs.sum + \"  \",\r\n      \"background: #333333; color: #00dd00\"\r\n  );\r\n\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function getCursorPosition() {\r\n    var cartesian = [];\r\n    sdk.Pointer.intersection.subscribe(function (intersectionData) {\r\n      cartesian = [\r\n        intersectionData.position.x,\r\n        intersectionData.position.y,\r\n        intersectionData.position.z,\r\n        intersectionData.normal.x,\r\n        intersectionData.normal.y,\r\n        intersectionData.normal.z,\r\n\r\n      ];\r\n      //console.log(cartesian)\r\n    });\r\n\r\n    return cartesian;\r\n  }\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n  function Box() {\r\n    this.inputs = {\r\n      visible: true,\r\n\r\n    };\r\n\r\n    this.onInit = function () {\r\n      var THREE = this.context.three;\r\n      var geometry = new THREE.BoxGeometry(1, 1, 1);\r\n      this.material = new THREE.MeshPhongMaterial();\r\n      this.material.color = new THREE.Color(\"skyblue\");\r\n      var mesh = new THREE.Mesh(geometry, this.material);\r\n      this.outputs.objectRoot = mesh;\r\n      this.outputs.collider = mesh;\r\n    };\r\n\r\n    this.onEvent = function (type, data) {\r\n      /*      var THREE = this.context.three;\r\n      if (this.type === this.ComponentInteractionType.HOVER) {\r\n        this.material.color = new THREE.Color(\"red\");\r\n      }*/\r\n    };\r\n\r\n    this.onInputsUpdated = function (previous) {};\r\n\r\n    this.onTick = function (tickDelta) {};\r\n\r\n    this.onDestroy = function () {\r\n      this.material.dispose();\r\n    };\r\n  }\r\n\r\n  function BoxFactory() {\r\n    return new Box();\r\n  }\r\n\r\n  //var clickCount = 0;\r\n  //var hoverCount = 0;\r\n  //var hoverCountPlant = 0;\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //this renderable class is the box that is spawned. Also a three.js primitive\r\n/*  function Renderable() {\r\n    this.inputs = {\r\n      name: null,\r\n      visible: false,\r\n      color: \"yellow\",\r\n      opacity: 1,\r\n    };\r\n\r\n    this.update = function () {\r\n      const THREE = this.context.three;\r\n      this.material.color = new THREE.Color(this.inputs.color);\r\n      this.material.opacity = this.inputs.opacity;\r\n    }\r\n\r\n    this.onInit = function () {\r\n      const THREE = this.context.three;\r\n      //this.material = new THREE.MeshPhongMaterial();\r\n      var geometry = new THREE.BoxGeometry(.5, .5, .5);\r\n\r\n\r\n/!*      var texture = new THREE.TextureLoader().load(\r\n        \"../BMcD/perspective-logo-large.png\"\r\n      );*!/\r\n\r\n\r\n      this.material = new THREE.MeshLambertMaterial();\r\n      this.material.color = new THREE.Color(this.inputs.color);\r\n      this.material.transparent = true;\r\n      this.material.opacity = this.inputs.opacity;\r\n\r\n      var mesh = new THREE.Mesh(geometry, this.material);\r\n      this.outputs.objectRoot = mesh;\r\n      this.outputs.collider = mesh;\r\n\r\n      /!*      var loader = new THREE.FontLoader();\r\n\r\n      loader.load(\"../bundle/fonts/mp-font.eot\", function (font) {\r\n        var geometry = new THREE.TextGeometry(\"Hello three.js!\", {\r\n          font: font,\r\n          size: 80,\r\n          height: 5,\r\n          curveSegments: 12,\r\n          bevelEnabled: true,\r\n          bevelThickness: 10,\r\n          bevelSize: 8,\r\n          bevelOffset: 0,\r\n          bevelSegments: 5,\r\n        });\r\n\r\n        this.material = new THREE.MeshLambertMaterial();\r\n        var mesh = new THREE.Mesh(geometry, this.material);\r\n        this.outputs.objectRoot = mesh;\r\n        this.outputs.collider = mesh;\r\n      });*!/\r\n    };\r\n    this.onEvent = function (eventType: string) {\r\n      // console.log(eventType + \" count: \" + hoverCount);\r\n      const THREE = this.context.three;\r\n\r\n      //click events\r\n\r\n\r\n      /!*if ((this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 == 0)) {\r\n        clickCount++;\r\n        console.log(\"Clickable component was clicked!\" + clickCount);\r\n        this.material.color = new THREE.Color(\"royalblue\");\r\n      } else if (\r\n        (this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 != 0)\r\n      ) {\r\n        clickCount++;\r\n        console.log(\"Clickable component was clicked!\" + clickCount);\r\n        this.material.color = new THREE.Color(\"white\");\r\n      }*!/\r\n\r\n      //hover events\r\n      if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 == 0) {\r\n        this.material.color = new THREE.Color(this.inputs.color);\r\n        hoverCount++;\r\n      } else if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 != 0) {\r\n        this.inputs.color = \"royalblue\"\r\n        this.material.color = new THREE.Color(this.inputs.color);\r\n        hoverCount++;\r\n      }\r\n\r\n      //drag events (ha)\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        //changeColor();\r\n        //var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n       // here.obj3D.position.set(cartesian[0], 0.5, cartesian[2]);\r\n      }\r\n    };\r\n\r\n    this.onTick = function (tickDelta) {};\r\n\r\n  }\r\n\r\n\r\n  function rendyFactor() {\r\n    return new Renderable();\r\n  }\r\n  sdk.Scene.register(\"testy\", rendyFactor);*/\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/*  function Rack() {\r\n    this.inputs = {\r\n      name: null,\r\n      visible: false,\r\n      color: \"yellow\",\r\n      opacity: 1,\r\n    };\r\n\r\n    this.update = function () {\r\n      const THREE = this.context.three;\r\n      this.material.color = new THREE.Color(this.inputs.color);\r\n      this.material.opacity = this.inputs.opacity;\r\n    }\r\n\r\n    this.onInit = function () {\r\n\r\n    };\r\n    this.onEvent = function (eventType: string) {\r\n\r\n      if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 == 0) {\r\n        hoverCount++;\r\n      } else if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 != 0) {\r\n        hoverCount++;\r\n      }\r\n\r\n      //drag events (ha)\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        here.obj3D.position.set(cartesian[0], 0.5, cartesian[2]);\r\n      }\r\n    };\r\n\r\n    this.onTick = function (tickDelta) {};\r\n\r\n  }\r\n\r\n\r\n  function rackFactory() {\r\n    return new Rack();\r\n  }\r\n  sdk.Scene.register(\"testy\", rendyFactor);*/\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////\r\n  //this spawner will be where new stuff will be spawned. This is a three.js primitives\r\n\r\n  var spawnerPosition = [];\r\n\r\n  function Spawner() {\r\n    this.inputs = {\r\n      name: null,\r\n      visible: false,\r\n      color: \"white\",\r\n      opacity: 1,\r\n    };\r\n\r\n    this.update = function () {\r\n      const THREE = this.context.three;\r\n      this.material.color = new THREE.Color(this.inputs.color);\r\n      this.material.opacity = this.inputs.opacity;\r\n    }\r\n\r\n    this.onInit = function () {\r\n      const THREE = this.context.three;\r\n      //this.material = new THREE.MeshPhongMaterial();\r\n      var geometry = new THREE.CylinderGeometry(.5, .5, .01, 50);\r\n\r\n\r\n/*\r\n            var texture = new THREE.TextureLoader().load(\r\n              \"../BMcD/target.png\"\r\n            );\r\n\r\n*/\r\n\r\n      this.material = new THREE.MeshLambertMaterial();\r\n      this.material.color = new THREE.Color(this.inputs.color);\r\n      this.material.transparent = true;\r\n      this.material.opacity = this.inputs.opacity;\r\n\r\n      var mesh = new THREE.Mesh(geometry, this.material);\r\n      this.outputs.objectRoot = mesh;\r\n      this.outputs.collider = mesh;\r\n\r\n      /*      var loader = new THREE.FontLoader();\r\n\r\n      loader.load(\"../bundle/fonts/mp-font.eot\", function (font) {\r\n        var geometry = new THREE.TextGeometry(\"Hello three.js!\", {\r\n          font: font,\r\n          size: 80,\r\n          height: 5,\r\n          curveSegments: 12,\r\n          bevelEnabled: true,\r\n          bevelThickness: 10,\r\n          bevelSize: 8,\r\n          bevelOffset: 0,\r\n          bevelSegments: 5,\r\n        });\r\n\r\n        this.material = new THREE.MeshLambertMaterial();\r\n        var mesh = new THREE.Mesh(geometry, this.material);\r\n        this.outputs.objectRoot = mesh;\r\n        this.outputs.collider = mesh;\r\n      });*/\r\n    };\r\n    this.onEvent = function (eventType: string) {\r\n      // console.log(eventType + \" count: \" + hoverCount);\r\n     // const THREE = this.context.three;\r\n\r\n      //click events\r\n\r\n\r\n      /*if ((this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 == 0)) {\r\n        clickCount++;\r\n        console.log(\"Clickable component was clicked!\" + clickCount);\r\n        this.material.color = new THREE.Color(\"royalblue\");\r\n      } else if (\r\n        (this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 != 0)\r\n      ) {\r\n        clickCount++;\r\n        console.log(\"Clickable component was clicked!\" + clickCount);\r\n        this.material.color = new THREE.Color(\"white\");\r\n      }*/\r\n\r\n/*      //hover events\r\n      if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 == 0) {\r\n        this.material.color = new THREE.Color(this.inputs.color);\r\n        hoverCount++;\r\n      } else if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 != 0) {\r\n        this.inputs.color = \"royalblue\"\r\n        this.material.color = new THREE.Color(this.inputs.color);\r\n        hoverCount++;\r\n      }*/\r\n\r\n      //drag events (ha)\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        //changeColor();\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        spawnNode.obj3D.position.set(cartesian[0], 0, cartesian[2]);\r\n        spawnerPosition = cartesian;\r\n      }\r\n    };\r\n\r\n    this.onTick = function (tickDelta) {};\r\n\r\n  }\r\n\r\n\r\n  function spawnFactor() {\r\n    return new Spawner();\r\n  }\r\n  sdk.Scene.register(\"spawn\", spawnFactor);\r\n\r\n  const spawnNode = await sdk.Scene.createNode();\r\n\r\n  const spawner = spawnNode.addComponent(\"spawn\");\r\n  spawner.events[\"INTERACTION.HOVER\"] = true;\r\n  spawner.events[\"INTERACTION.DRAG\"] = true;\r\n  spawner.events[\"INTERACTION.CLICK\"] = true;\r\n\r\n  spawnNode.obj3D.position.set(-7, 0, 5.5)\r\n  spawner.inputs.opacity = 1;\r\n  spawnNode.start();\r\n  //end of spawner definition\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n  document.getElementById(\"clickMe\").onclick = function changeColor() {\r\n    console.log(\"color change\")\r\n    bull.inputs.color = \"green\";\r\n  }\r\n\r\n\r\n  document.getElementById(\"clickMe2\").onclick = function appear() {\r\n    if(bull.inputs.opacity != 1) {\r\n      while (bull.inputs.opacity < 1) {\r\n        bull.inputs.opacity = bull.inputs.opacity + .0001;\r\n        bull.update();\r\n        console.log(\"while \" + bull.inputs.opacity)\r\n      }\r\n    }\r\n  }\r\n\r\n  document.getElementById(\"clickMe3\").onclick = function disappear() {\r\n      bull.inputs.opacity = 0;\r\n  }\r\n\r\n  var boxArray = [];\r\n  var nodeArray = [];\r\n  var boxIndex = 0;\r\n  var boxSelected = 0;\r\n  var pastSelection = 0;\r\n\r\n  document.getElementById(\"clickMe4\").onclick = async function newBox() {\r\n    console.log(\"Box Selected: \" + boxSelected + \"\\n\" + \"Box Index: \" + boxIndex )\r\n\r\n    nodeArray[boxIndex] = await sdk.Scene.createNode();\r\n    boxArray[boxIndex] = nodeArray[boxIndex].addComponent(\"testy\");\r\n    nodeArray[boxIndex].obj3D.position.set(spawnerPosition[0], .5, spawnerPosition[2]);\r\n    boxArray[boxIndex].inputs.color = \"yellow\";\r\n    boxArray[boxIndex].events[\"INTERACTION.HOVER\"] = true;\r\n    boxArray[boxIndex].events[\"INTERACTION.DRAG\"] = true;\r\n    boxArray[boxIndex].events[\"INTERACTION.CLICK\"] = true;\r\n    boxArray[boxIndex].inputs.name = boxIndex;\r\n\r\n    boxArray[boxIndex].onEvent = function (eventType: string) {\r\n      if (eventType == \"INTERACTION.CLICK\") {\r\n        pastSelection = boxSelected;\r\n        boxSelected = this.inputs.name;\r\n        console.log(boxSelected)\r\n        //boxSelected = boxIndex;\r\n        //boxArray[boxSelected].inputs.color = \"blue\";\r\n      }\r\n\r\n        if (eventType == \"INTERACTION.DRAG\") {\r\n          //boxArray[boxIndex].inputs.color = \"blue\";\r\n          console.log(boxIndex)\r\n\r\n          var cartesian = getCursorPosition();\r\n          //console.log(cartesian);\r\n          nodeArray[boxSelected].obj3D.position.set(cartesian[0], .5, cartesian[2]);\r\n        }\r\n\r\n    };\r\n\r\n    nodeArray[boxIndex].start()\r\n  boxIndex++;\r\n  }\r\n\r\n  document.getElementById(\"clickMe5\").onclick = async function deleteBox() {\r\n    console.log(nodeArray)\r\n    nodeArray[boxSelected].stop();\r\n    console.log(nodeArray)\r\n\r\n  }\r\n\r\n    function updateSelection() {\r\n    if(boxIndex !=0)\r\n    {\r\n      boxArray[pastSelection].inputs.color = \"yellow\";\r\n      boxArray[pastSelection].update();\r\n\r\n      boxArray[boxSelected].inputs.color = \"orange\"\r\n      boxArray[boxSelected].update();\r\n    }\r\n}*/\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  var rackArray = [];\r\n  var rackNodeArray = [];\r\n  var rackIndex = 0;\r\n  var rackSelected = 0;\r\n  var pastRackSelection = 0;\r\n\r\n\r\n  document.getElementById(\"clickMe6\").onclick = async function newRack() {\r\n\r\n    rackNodeArray[rackIndex] = await sdk.Scene.createNode();\r\n    rackArray[rackIndex] = rackNodeArray[rackIndex].addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n      url: \"./fbx/Telecom/Telecom.fbx\",\r\n    });\r\n\r\n    rackArray[rackIndex].inputs.localScale = {\r\n      x: 0.022,\r\n      y: 0.022,\r\n      z: 0.022,\r\n    };\r\n\r\n    rackNodeArray[rackIndex].obj3D.position.set(spawnerPosition[0], 0, spawnerPosition[2]);\r\n    rackArray[rackIndex].events[\"INTERACTION.HOVER\"] = true;\r\n    rackArray[rackIndex].events[\"INTERACTION.DRAG\"] = true;\r\n    rackArray[rackIndex].events[\"INTERACTION.CLICK\"] = true;\r\n    rackArray[rackIndex].name = rackIndex;\r\n    console.log(rackArray[rackIndex].name);\r\n    console.log(rackArray[rackIndex]);\r\n\r\n\r\n    rackArray[rackIndex].onEvent = function (eventType: string) {\r\n      if (eventType == \"INTERACTION.CLICK\") {\r\n        pastRackSelection = rackSelected;\r\n        console.log(pastRackSelection);\r\n        rackSelected = this.name;\r\n        console.log(rackSelected)\r\n        //boxSelected = boxIndex;\r\n        //boxArray[boxSelected].inputs.color = \"blue\";\r\n      }\r\n\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n\r\n        if(cartesian[3] == 1 || cartesian[3] ==  -1)\r\n        {\r\n          rackNodeArray[rackSelected].obj3D.position.z = cartesian[2];\r\n\r\n        }\r\n\r\n        if(cartesian[4] == 1)\r\n        {\r\n          rackNodeArray[rackSelected].obj3D.position.set(cartesian[0], 0, cartesian[2])\r\n        }\r\n\r\n\r\n        if(cartesian[5] == 1 || cartesian[5] ==  -1)\r\n        {\r\n          rackNodeArray[rackSelected].obj3D.position.x = cartesian[0];\r\n        }\r\n\r\n\r\n        //boxArray[boxIndex].inputs.color = \"blue\";\r\n        //console.log(rackIndex)\r\n\r\n        //console.log(cartesian);\r\n        //console.log(sdk.Pointer)\r\n       // rackNodeArray[rackSelected].obj3D.position.set(cartesian[0], 0, cartesian[2]);\r\n      }\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    rackNodeArray[rackIndex].start();\r\n    rackIndex++;\r\n\r\n  }\r\n\r\n\r\n  document.getElementById(\"clickMe7\").onclick = async function deleteRack() {\r\n    console.log(rackArray)\r\n    rackNodeArray[rackSelected].stop();\r\n    console.log(rackArray)\r\n\r\n  }\r\n\r\n  document.getElementById(\"clickMe8\").onclick = async function rotateRack() {\r\n   rackNodeArray[rackSelected].obj3D.rotation.y += Math.PI/2;\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/*\r\n\r\n  var rackArray = [];\r\n  var rackNodeArray = [];\r\n  var rackIndex = 0;\r\n  var rackSelected = 0;\r\n  var pastRackSelection = 0;\r\n\r\n  document.getElementById(\"clickMe4\").onclick = async function newBox() {\r\n    console.log(\"Box Selected: \" + rackSelected + \"\\n\" + \"Box Index: \" + rackIndex )\r\n\r\n    rackNodeArray[rackIndex] = await sdk.Scene.createNode();\r\n    rackArray[rackIndex] = rackNodeArray[rackIndex].addComponent(\"testy\");\r\n    rackNodeArray[rackIndex].obj3D.position.set(spawnerPosition[0], .5, spawnerPosition[2]);\r\n    rackArray[rackIndex].inputs.color = \"yellow\";\r\n    rackArray[rackIndex].events[\"INTERACTION.HOVER\"] = true;\r\n    rackArray[rackIndex].events[\"INTERACTION.DRAG\"] = true;\r\n    rackArray[rackIndex].events[\"INTERACTION.CLICK\"] = true;\r\n    rackArray[rackIndex].inputs.name = rackIndex;\r\n\r\n    rackArray[rackIndex].onEvent = function (eventType: string) {\r\n      if (eventType == \"INTERACTION.CLICK\") {\r\n        pastRackSelection = rackSelected;\r\n        rackSelected = this.inputs.name;\r\n        console.log(rackSelected)\r\n        //rackSelected = rackIndex;\r\n        //rackArray[rackSelected].inputs.color = \"blue\";\r\n      }\r\n\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        //rackArray[rackIndex].inputs.color = \"blue\";\r\n        console.log(rackIndex)\r\n\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        rackNodeArray[rackSelected].obj3D.position.set(cartesian[0], .5, cartesian[2]);\r\n      }\r\n\r\n    };\r\n\r\n    rackNodeArray[rackIndex].start()\r\n    rackIndex++;\r\n  }\r\n\r\n\r\n  document.getElementById(\"clickMe5\").onclick = async function deleteBox() {\r\n    console.log(nodeArray)\r\n    rackNodeArray[rackSelected].stop();\r\n  }\r\n\r\n  function updateSelection() {\r\n    if(rackIndex !=0)\r\n    {\r\n      rackArray[pastRackSelection].inputs.color = \"yellow\";\r\n      rackArray[pastRackSelection].update();\r\n\r\n      rackArray[rackSelected].inputs.color = \"orange\"\r\n      rackArray[rackSelected].update();\r\n    }\r\n  }\r\n\r\n*/\r\n\r\n\r\n  // Registering the component with the sdk\r\n  sdk.Scene.register(\"box\", BoxFactory);\r\n\r\n  //Necessary for adding objects. This is what will actually\r\n  //put our 3D object into our space\r\n /* const modelNode = await sdk.Scene.createNode();\r\n  const littleGuy = await sdk.Scene.createNode();\r\n  const fan = await sdk.Scene.createNode();\r\n  const wall = await sdk.Scene.createNode();*/\r\n  //const voltageNode = await sdk.Scene.createNode();\r\n // const cboNode = await sdk.Scene.createNode();\r\n\r\n\r\n\r\n  // const test = await sdk.Scene.createNode();\r\n\r\n/*  const here = await sdk.Scene.createNode();\r\n\r\n  const bull = here.addComponent(\"testy\");\r\n\r\n  here.obj3D.position.set(-5, .5, 5.5);\r\n  here.start();*/\r\n  // Store the fbx component since we will need to adjust it in the next step.\r\n  //Object is stored inside of the project\r\n  //The url could be some internet address where it is stored\r\n  //this leads to a potted plant\r\n /* const fbxComponent = modelNode.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/Telecom/Telecom.fbx\",\r\n  });\r\n  const fella = littleGuy.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/Nokia/Nokia.fbx\",\r\n  });\r\n\r\n  const fanster = fan.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/Sageon/Sageon.fbx\",\r\n  });\r\n  const powerWall = wall.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/Wall/Wall.fbx\",\r\n  });*/\r\n\r\n/*  const voltage = voltageNode.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/randy/voltage.fbx\",\r\n  });*/\r\n\r\n/*\r\n  const cbo = cboNode.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/hawk/hawk+Logo.fbx\",\r\n  });\r\n*/\r\n\r\n  //const testtest = test.addComponent(\"box\");\r\n\r\n  //Adjsut the scale of the plant. I do not know any better way than tuning right now\r\n\r\n  //voltageNode.obj3D.transparent = true;\r\n  //voltageNode.obj3D.opacity = .5;\r\n\r\n/*\r\n  cbo.inputs.localScale = {\r\n    x: .5,\r\n    y: .5,\r\n    z: .5,\r\n  };\r\n*/\r\n/*\r\n\r\n\r\n  powerWall.inputs.localScale = {\r\n    x: 1,\r\n    y: 1,\r\n    z: 1,\r\n  };\r\n\r\n  fbxComponent.inputs.localScale = {\r\n    x: 0.022,\r\n    y: 0.022,\r\n    z: 0.022,\r\n  };\r\n\r\n  fella.inputs.localScale = {\r\n    x: 0.02,\r\n    y: 0.02,\r\n    z: 0.02,\r\n  };\r\n\r\n  fanster.inputs.localScale = {\r\n    x: 0.001,\r\n    y: 0.001,\r\n    z: 0.001,\r\n  };\r\n\r\n  powerWall.onEvent = function (eventType: string) {\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        wall.obj3D.position.set(cartesian[0], 0, 5.2);\r\n      }\r\n    }\r\n  };\r\n\r\n  fella.onEvent = function (eventType: string) {\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        littleGuy.obj3D.position.set(cartesian[0], 0.75, cartesian[2]);\r\n      }\r\n    }\r\n  };\r\n\r\n  fanster.onEvent = function (eventType: string) {\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        fan.obj3D.position.set(-10.6, 0, cartesian[2]);\r\n      }\r\n    }\r\n  };\r\n*/\r\n\r\n/*  voltage.onEvent = function (eventType: string) {\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n       var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        voltageNode.obj3D.position.set(-2.75, cartesian[1], 4.8);\r\n      }\r\n    }\r\n  };*/\r\n/*\r\n  cbo.onEvent = function (eventType: string) {\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        cboNode.obj3D.position.set(cartesian[0], 0, cartesian[2]);\r\n      }\r\n    }\r\n  };*/\r\n\r\n  //voltageNode.obj3D.castShadow = true;\r\n  //console.log(voltageNode)\r\n/*\r\n\r\n  fbxComponent.onEvent = function (eventType: string) {\r\n    // console.log(eventType + \" count: \" + hoverCount);\r\n\r\n    //click events\r\n    /!*if ((this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 == 0)) {\r\n      clickCount++;\r\n      console.log(\"Clickable component was clicked!\" + clickCount);\r\n      this.material.color = new THREE.Color(\"royalblue\");\r\n    } else if (\r\n      (this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 != 0)\r\n    ) {\r\n      clickCount++;\r\n      console.log(\"Clickable component was clicked!\" + clickCount);\r\n      this.material.color = new THREE.Color(\"white\");\r\n    }*!/\r\n\r\n    //hover events\r\n    if (eventType == \"INTERACTION.HOVER\" && hoverCountPlant % 2 == 0) {\r\n      /!* console.log(\"yerp\");\r\n      fbxComponent.inputs.localScale = {\r\n        x: 0.022 * 1.1,\r\n        y: 0.022 * 1.1,\r\n        z: 0.022 * 1.1,\r\n      };*!/\r\n      hoverCountPlant++;\r\n    } else if (eventType == \"INTERACTION.HOVER\" && hoverCountPlant % 2 != 0) {\r\n      //this.material.color = new THREE.Color(\"royalblue\");\r\n      /!* console.log(\"yerp1\");\r\n      fbxComponent.inputs.localScale = {\r\n        x: 0.022 / 1.1,\r\n        y: 0.022 / 1.1,\r\n        z: 0.022 / 1.1,\r\n      };*!/\r\n      hoverCountPlant++;\r\n    }\r\n\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        modelNode.obj3D.position.set(cartesian[0], 0, cartesian[2]);\r\n      }\r\n    }\r\n  };\r\n\r\n  //Location of the plant. X is \"left and right\", Y is \"up and down\", Z is \"Forward and back\"\r\n  // Relative to \"spawn\" location of the viewer. If you move those relations will not hold\r\n  littleGuy.obj3D.position.set(-1.135, 0.763, 0.777);\r\n  modelNode.obj3D.position.set(-7, 0, 7);\r\n  modelNode.obj3D.rotation.y = (90 * Math.PI) / 180;\r\n  wall.obj3D.position.set(-2.559, 0, 5.2);\r\n  fan.obj3D.position.set(-10.6, 0, 4.097);\r\n  fan.obj3D.rotation.y = (90 * Math.PI) / 180;\r\n  littleGuy.obj3D.rotation.y = (180 * Math.PI) / 180;\r\n/!*  voltageNode.obj3D.rotation.y = (0 * Math.PI) / 180;\r\n  voltageNode.obj3D.position.set(-2.75, 1, 4.8)*!/\r\n // cboNode.obj3D.position.set(-4, 0, 6.5)\r\n  //test.obj3D.position.set(-6.5, 0.5, 1.21);\r\n // cboNode.obj3D.rotation.y = Math.PI/2;\r\n\r\n\r\n/!*\r\n  sdk.Pointer.intersection.subscribe(function (intersectionData) {\r\n    // Changes to the intersection data have occurred.\r\n    document.getElementById(\"demo\").innerHTML =\r\n        \"X position : \" +\r\n        Number.parseFloat(intersectionData.position.x).toFixed(3) +\r\n        \" m\" +\r\n        \"<br/>\" +\r\n        \"Y position : \" +\r\n        Number.parseFloat(intersectionData.position.y).toFixed(3) +\r\n        \" m\" +\r\n        \"<br/>\" +\r\n        \"Z position : \" +\r\n        Number.parseFloat(intersectionData.position.z).toFixed(3) +\r\n        \" m\";\r\n  });\r\n\r\n*!/\r\n\r\n\r\n\r\n\r\n\r\n  //Rot is for the ultra-impressive cosine rotation\r\n  //the .start() is what will actually add the object inside the node to scene\r\n\r\n  modelNode.obj3D.visible = false;\r\n  littleGuy.obj3D.visible = false;\r\n  fan.obj3D.visible = false;\r\n  wall.obj3D.visible = false;\r\n\r\n/!*\r\n  modelNode.start();\r\n  littleGuy.start();\r\n  fan.start();\r\n  wall.start();\r\n*!/\r\n\r\n  //voltageNode.start();\r\n  //cboNode.start();\r\n  //test.start();\r\n\r\n  /!* sdk.Mattertag.add([{\r\n     label: \"New tag\",\r\n     description: \"This tag was added through the Matterport SDK\",\r\n     anchorPosition : {\r\n       x: 0,\r\n       y: 0,\r\n       z: 0,\r\n     },\r\n     stemVector: { // make the Mattertag stick straight up and make it 0.30 meters (~1 foot) tall\r\n       x: 0,\r\n       y: 0.30,\r\n       z: 0,\r\n     },\r\n     color: { // blue disc\r\n       r: 0.0,\r\n       g: 0.0,\r\n       b: 1.0,\r\n     },\r\n     //floorId?: number, // optional, if not specified the sdk will provide an estimate of the floor id for the anchor position provided.\r\n   }])\r\n *!/\r\n\r\n  //This runs constantly to allow for animation. I am still unfamiliar with this\r\n  //It is called recursively though, so I think anything after this will not be reached\r\n  // The above is FALSE, it will read past this function. But I think it is still recursive because\r\n  //If a console.log() statement is put inside it is logged hundreds of times\r\n\r\n  //console.log(bull.events[\"INTERACTION.CLICK\"]);\r\n\r\n//  bull.events[\"INTERACTION.CLICK\"] = true;\r\n//  bull.events[\"INTERACTION.HOVER\"] = true;\r\n//  bull.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n  fbxComponent.events[\"INTERACTION.HOVER\"] = true;\r\n  fbxComponent.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n  fanster.events[\"INTERACTION.HOVER\"] = true;\r\n  fanster.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n  fella.events[\"INTERACTION.HOVER\"] = true;\r\n  fella.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n  powerWall.events[\"INTERACTION.HOVER\"] = true;\r\n  powerWall.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n//  voltage.events[\"INTERACTION.HOVER\"] = true;\r\n // voltage.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n/!*\r\n  let objects = [];\r\n  try {\r\n    objects = await sdk.Scene.query(['scene']);\r\n  }\r\n  catch(e) {\r\n    console.log(e);\r\n  }\r\n\r\n  const node1 = await sdk.Scene.createNode();\r\n  document.getElementById(\"demo\").innerHTML = node1.addComponent('mp.transformControls', {\r\n    scene: objects,\r\n  });\r\n  node.start();\r\n*!/\r\n\r\n//    setScene(objects);;\r\n\r\n\r\n/!*  cbo.events[\"INTERACTION.HOVER\"] = true;\r\n  cbo.events[\"INTERACTION.DRAG\"] = true;*!/\r\n*/\r\n\r\n\r\n  const tick = function () {\r\n    requestAnimationFrame(tick);\r\n    //fan.obj3D.rotation.y = rot;\r\n    // rot = rot + 0.02\r\n  //bull.update();\r\n  //updateSelection();\r\n  };\r\n  tick();\r\n});\r\n"],"sourceRoot":""}