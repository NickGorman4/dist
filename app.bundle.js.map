{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","console","log","showcase","document","getElementById","addEventListener","sdk","contentWindow","MP_SDK","connect","e","error","lights","Scene","createNode","Sum","this","inputs","augend","addend","outputs","sum","onInputsUpdated","SumFactory","addComponent","start","sum1","register","node","comp1","comp2","comp3","getCursorPosition","cartesian","Pointer","intersection","subscribe","intersectionData","position","x","y","z","normal","Box","visible","onInit","THREE","context","three","geometry","BoxGeometry","material","MeshPhongMaterial","color","Color","mesh","Mesh","objectRoot","collider","onEvent","type","data","previous","onTick","tickDelta","onDestroy","dispose","hoverCount","hoverCountPlant","Renderable","opacity","update","MeshLambertMaterial","transparent","eventType","here","obj3D","set","spawnerPosition","Spawner","CylinderGeometry","spawnNode","spawner","events","onclick","bull","boxArray","nodeArray","boxIndex","boxSelected","pastSelection","stop","rackArray","rackNodeArray","rackIndex","rackSelected","pastRackSelection","Component","FBX_LOADER","url","localScale","modelNode","littleGuy","fan","wall","voltageNode","fbxComponent","fella","fanster","powerWall","voltage","castShadow","rotation","Math","PI","tick","requestAnimationFrame"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gVClFrDC,QAAQC,IAAI,sBAEZ,MAAMC,EAAWC,SAASC,eAAe,YAazCF,EAASG,iBAAiB,QAAQ,W,yCAChC,IAAIC,EACJ,IACEA,QAAYJ,EAASK,cAAcC,OAAOC,QAAQP,EAf1C,mCAeyD,OACjE,MAAOQ,GAEP,YADAV,QAAQW,MAAMD,GAIhBV,QAAQC,IAAI,yBAA0B,uCACtCD,QAAQC,IAAIK,GAGZ,MAAMM,QAAeN,EAAIO,MAAMC,aAS/B,SAASC,IACPC,KAAKC,OAAS,CACZC,OAAQ,EACRC,OAAQ,GAGVH,KAAKI,QAAU,CACbC,IAAK,GAIPL,KAAKM,gBAAkB,WACrBN,KAAKI,QAAQC,IAAML,KAAKC,OAAOC,OAASF,KAAKC,OAAOE,QAKxD,SAASI,IACP,OAAO,IAAIR,EA1BbH,EAAOY,aAAa,aACpBZ,EAAOa,QA6BP,IAAIC,EAAOH,IACXG,EAAKT,OAAOC,OAAS,EACrBQ,EAAKT,OAAOE,OAAS,GACrBO,EAAKJ,kBACLtB,QAAQC,IAAIyB,EAAKN,QAAQC,KAGzBf,EAAIO,MAAMc,SAAS,MAAOJ,GAG1B,IAAIK,QAAatB,EAAIO,MAAMC,aACvBe,EAAQD,EAAKJ,aAAa,OAC1BM,EAAQF,EAAKJ,aAAa,OAC1BO,EAAQH,EAAKJ,aAAa,OAwB9B,SAASQ,IACP,IAAIC,EAAY,GAchB,OAbA3B,EAAI4B,QAAQC,aAAaC,WAAU,SAAUC,GAC3CJ,EAAY,CACVI,EAAiBC,SAASC,EAC1BF,EAAiBC,SAASE,EAC1BH,EAAiBC,SAASG,EAC1BJ,EAAiBK,OAAOH,EACxBF,EAAiBK,OAAOF,EACxBH,EAAiBK,OAAOD,MAMrBR,EAKT,SAASU,IACP3B,KAAKC,OAAS,CACZ2B,SAAS,GAIX5B,KAAK6B,OAAS,WACZ,IAAIC,EAAQ9B,KAAK+B,QAAQC,MACrBC,EAAW,IAAIH,EAAMI,YAAY,EAAG,EAAG,GAC3ClC,KAAKmC,SAAW,IAAIL,EAAMM,kBAC1BpC,KAAKmC,SAASE,MAAQ,IAAIP,EAAMQ,MAAM,WACtC,IAAIC,EAAO,IAAIT,EAAMU,KAAKP,EAAUjC,KAAKmC,UACzCnC,KAAKI,QAAQqC,WAAaF,EAC1BvC,KAAKI,QAAQsC,SAAWH,GAG1BvC,KAAK2C,QAAU,SAAUC,EAAMC,KAO/B7C,KAAKM,gBAAkB,SAAUwC,KAEjC9C,KAAK+C,OAAS,SAAUC,KAExBhD,KAAKiD,UAAY,WACfjD,KAAKmC,SAASe,WArElBrC,EAAMrC,KAAK,SAAUsC,EAAO,OAC5BD,EAAMrC,KAAK,SAAUuC,EAAO,OAE5BH,EAAKH,QAELK,EAAMb,OAAOC,OAAS,EACtBa,EAAMd,OAAOE,OAAS,EAGtBW,EAAMR,kBACNS,EAAMT,kBACNO,EAAMP,kBAENtB,QAAQC,IACJ,OAAS4B,EAAMT,QAAQC,IAAM,KAC7B,uCA+DJ,IAAI8C,EAAa,EACbC,EAAkB,EAMtB,SAASC,IACPrD,KAAKC,OAAS,CACZ1C,KAAM,KACNqE,SAAS,EACTS,MAAO,SACPiB,QAAS,GAGXtD,KAAKuD,OAAS,WACZ,MAAMzB,EAAQ9B,KAAK+B,QAAQC,MAC3BhC,KAAKmC,SAASE,MAAQ,IAAIP,EAAMQ,MAAMtC,KAAKC,OAAOoC,OAClDrC,KAAKmC,SAASmB,QAAUtD,KAAKC,OAAOqD,SAGtCtD,KAAK6B,OAAS,WACZ,MAAMC,EAAQ9B,KAAK+B,QAAQC,MAE3B,IAAIC,EAAW,IAAIH,EAAMI,YAAY,GAAI,GAAI,IAQ7ClC,KAAKmC,SAAW,IAAIL,EAAM0B,oBAC1BxD,KAAKmC,SAASE,MAAQ,IAAIP,EAAMQ,MAAMtC,KAAKC,OAAOoC,OAClDrC,KAAKmC,SAASsB,aAAc,EAC5BzD,KAAKmC,SAASmB,QAAUtD,KAAKC,OAAOqD,QAEpC,IAAIf,EAAO,IAAIT,EAAMU,KAAKP,EAAUjC,KAAKmC,UACzCnC,KAAKI,QAAQqC,WAAaF,EAC1BvC,KAAKI,QAAQsC,SAAWH,GAuB1BvC,KAAK2C,QAAU,SAAUe,GAEvB,MAAM5B,EAAQ9B,KAAK+B,QAAQC,MA4B3B,GAViB,qBAAb0B,GAAoCP,EAAa,GAAK,GACxDnD,KAAKmC,SAASE,MAAQ,IAAIP,EAAMQ,MAAMtC,KAAKC,OAAOoC,OAClDc,KACsB,qBAAbO,GAAoCP,EAAa,GAAK,IAC/DnD,KAAKC,OAAOoC,MAAQ,YACpBrC,KAAKmC,SAASE,MAAQ,IAAIP,EAAMQ,MAAMtC,KAAKC,OAAOoC,OAClDc,KAIe,oBAAbO,EAAiC,CAEnC,IAAIzC,EAAYD,IAEhB2C,EAAKC,MAAMtC,SAASuC,IAAI5C,EAAU,GAAI,GAAKA,EAAU,MAIzDjB,KAAK+C,OAAS,SAAUC,KAQ1B1D,EAAIO,MAAMc,SAAS,SAHnB,WACE,OAAO,IAAI0C,KA8Db,IAAIS,EAAkB,GAEtB,SAASC,IACP/D,KAAKC,OAAS,CACZ1C,KAAM,KACNqE,SAAS,EACTS,MAAO,QACPiB,QAAS,GAGXtD,KAAKuD,OAAS,WACZ,MAAMzB,EAAQ9B,KAAK+B,QAAQC,MAC3BhC,KAAKmC,SAASE,MAAQ,IAAIP,EAAMQ,MAAMtC,KAAKC,OAAOoC,OAClDrC,KAAKmC,SAASmB,QAAUtD,KAAKC,OAAOqD,SAGtCtD,KAAK6B,OAAS,WACZ,MAAMC,EAAQ9B,KAAK+B,QAAQC,MAE3B,IAAIC,EAAW,IAAIH,EAAMkC,iBAAiB,GAAI,GAAI,IAAK,IAUvDhE,KAAKmC,SAAW,IAAIL,EAAM0B,oBAC1BxD,KAAKmC,SAASE,MAAQ,IAAIP,EAAMQ,MAAMtC,KAAKC,OAAOoC,OAClDrC,KAAKmC,SAASsB,aAAc,EAC5BzD,KAAKmC,SAASmB,QAAUtD,KAAKC,OAAOqD,QAEpC,IAAIf,EAAO,IAAIT,EAAMU,KAAKP,EAAUjC,KAAKmC,UACzCnC,KAAKI,QAAQqC,WAAaF,EAC1BvC,KAAKI,QAAQsC,SAAWH,GAuB1BvC,KAAK2C,QAAU,SAAUe,GA8BvB,GAAiB,oBAAbA,EAAiC,CAEnC,IAAIzC,EAAYD,IAEhBiD,EAAUL,MAAMtC,SAASuC,IAAI5C,EAAU,GAAI,EAAGA,EAAU,IACxD6C,EAAkB7C,IAItBjB,KAAK+C,OAAS,SAAUC,KAQ1B1D,EAAIO,MAAMc,SAAS,SAHnB,WACE,OAAO,IAAIoD,KAIb,MAAME,QAAkB3E,EAAIO,MAAMC,aAE5BoE,EAAUD,EAAUzD,aAAa,SACvC0D,EAAQC,OAAO,sBAAuB,EACtCD,EAAQC,OAAO,qBAAsB,EACrCD,EAAQC,OAAO,sBAAuB,EAEtCF,EAAUL,MAAMtC,SAASuC,KAAK,EAAG,EAAG,KACpCK,EAAQjE,OAAOqD,QAAU,EACzBW,EAAUxD,QASVtB,SAASC,eAAe,WAAWgF,QAAU,WAC3CpF,QAAQC,IAAI,gBACZoF,EAAKpE,OAAOoC,MAAQ,SAItBlD,SAASC,eAAe,YAAYgF,QAAU,WAC5C,GAA0B,GAAvBC,EAAKpE,OAAOqD,QACb,KAAOe,EAAKpE,OAAOqD,QAAU,GAC3Be,EAAKpE,OAAOqD,QAAUe,EAAKpE,OAAOqD,QAAU,KAC5Ce,EAAKd,SACLvE,QAAQC,IAAI,SAAWoF,EAAKpE,OAAOqD,UAKzCnE,SAASC,eAAe,YAAYgF,QAAU,WAC1CC,EAAKpE,OAAOqD,QAAU,GAG1B,IAAIgB,EAAW,GACXC,EAAY,GACZC,EAAW,EACXC,EAAc,EACdC,EAAgB,EAEpBvF,SAASC,eAAe,YAAYgF,QAAU,W,yCAC5CpF,QAAQC,IAAI,iBAAmBwF,EAAnB,gBAAwDD,GAEpED,EAAUC,SAAkBlF,EAAIO,MAAMC,aACtCwE,EAASE,GAAYD,EAAUC,GAAUhE,aAAa,SACtD+D,EAAUC,GAAUZ,MAAMtC,SAASuC,IAAIC,EAAgB,GAAI,GAAIA,EAAgB,IAC/EQ,EAASE,GAAUvE,OAAOoC,MAAQ,SAClCiC,EAASE,GAAUL,OAAO,sBAAuB,EACjDG,EAASE,GAAUL,OAAO,qBAAsB,EAChDG,EAASE,GAAUL,OAAO,sBAAuB,EACjDG,EAASE,GAAUvE,OAAO1C,KAAOiH,EAEjCF,EAASE,GAAU7B,QAAU,SAAUe,GASnC,GARe,qBAAbA,IACFgB,EAAgBD,EAChBA,EAAczE,KAAKC,OAAO1C,KAC1ByB,QAAQC,IAAIwF,IAKK,oBAAbf,EAAiC,CAEnC1E,QAAQC,IAAIuF,GAEZ,IAAIvD,EAAYD,IAEhBuD,EAAUE,GAAab,MAAMtC,SAASuC,IAAI5C,EAAU,GAAI,GAAIA,EAAU,MAK5EsD,EAAUC,GAAU/D,QACtB+D,QAGArF,SAASC,eAAe,YAAYgF,QAAU,W,yCAC5CpF,QAAQC,IAAIsF,GACZA,EAAUE,GAAaE,OACvB3F,QAAQC,IAAIsF,OAed,IAAIK,EAAY,GACZC,EAAgB,GAChBC,EAAY,EACZC,EAAe,EACfC,EAAoB,EAGxB7F,SAASC,eAAe,YAAYgF,QAAU,W,yCAE5CS,EAAcC,SAAmBxF,EAAIO,MAAMC,aAC3C8E,EAAUE,GAAaD,EAAcC,GAAWtE,aAAalB,EAAIO,MAAMoF,UAAUC,WAAY,CAC3FC,IAAK,8BAGPP,EAAUE,GAAW7E,OAAOmF,WAAa,CACvC7D,EAAG,KACHC,EAAG,KACHC,EAAG,MAGLoD,EAAcC,GAAWlB,MAAMtC,SAASuC,IAAIC,EAAgB,GAAI,EAAGA,EAAgB,IACnFc,EAAUE,GAAWX,OAAO,sBAAuB,EACnDS,EAAUE,GAAWX,OAAO,qBAAsB,EAClDS,EAAUE,GAAWX,OAAO,sBAAuB,EACnDS,EAAUE,GAAWvH,KAAOuH,EAC5B9F,QAAQC,IAAI2F,EAAUE,GAAWvH,MACjCyB,QAAQC,IAAI2F,EAAUE,IAGtBF,EAAUE,GAAWnC,QAAU,SAAUe,GAUvC,GATiB,qBAAbA,IACFsB,EAAoBD,EACpB/F,QAAQC,IAAI+F,GACZD,EAAe/E,KAAKzC,KACpByB,QAAQC,IAAI8F,IAKG,oBAAbrB,EAAiC,CACnC,IAAIzC,EAAYD,IAEG,GAAhBC,EAAU,KAA6B,GAAlBA,EAAU,KAEhC4D,EAAcE,GAAcnB,MAAMtC,SAASG,EAAIR,EAAU,IAIxC,GAAhBA,EAAU,IAEX4D,EAAcE,GAAcnB,MAAMtC,SAASuC,IAAI5C,EAAU,GAAI,EAAGA,EAAU,IAIzD,GAAhBA,EAAU,KAA6B,GAAlBA,EAAU,KAEhC4D,EAAcE,GAAcnB,MAAMtC,SAASC,EAAIN,EAAU,IAK3DjC,QAAQC,IAAI6F,GAGZ9F,QAAQC,IAAIK,EAAI4B,WAUpB2D,EAAcC,GAAWrE,QACzBqE,QAKF3F,SAASC,eAAe,YAAYgF,QAAU,W,yCAC5CpF,QAAQC,IAAI2F,GACZC,EAAcE,GAAcJ,OAC5B3F,QAAQC,IAAI2F,OAsEdtF,EAAIO,MAAMc,SAAS,OAphBnB,WACE,OAAO,IAAIgB,KAuhBb,MAAM0D,QAAkB/F,EAAIO,MAAMC,aAC5BwF,QAAkBhG,EAAIO,MAAMC,aAC5ByF,QAAYjG,EAAIO,MAAMC,aACtB0F,QAAalG,EAAIO,MAAMC,aACvB2F,QAAoBnG,EAAIO,MAAMC,aAO9B6D,QAAarE,EAAIO,MAAMC,aAEvBuE,EAAOV,EAAKnD,aAAa,SAE/BmD,EAAKC,MAAMtC,SAASuC,KAAK,EAAG,GAAI,KAChCF,EAAKlD,QAKL,MAAMiF,EAAeL,EAAU7E,aAAalB,EAAIO,MAAMoF,UAAUC,WAAY,CAC1EC,IAAK,8BAEDQ,EAAQL,EAAU9E,aAAalB,EAAIO,MAAMoF,UAAUC,WAAY,CACnEC,IAAK,0BAGDS,EAAUL,EAAI/E,aAAalB,EAAIO,MAAMoF,UAAUC,WAAY,CAC/DC,IAAK,4BAEDU,EAAYL,EAAKhF,aAAalB,EAAIO,MAAMoF,UAAUC,WAAY,CAClEC,IAAK,wBAGDW,EAAUL,EAAYjF,aAAalB,EAAIO,MAAMoF,UAAUC,WAAY,CACvEC,IAAK,4BAaPM,EAAY7B,MAAMH,aAAc,EAChCgC,EAAY7B,MAAMN,QAAU,GAW5BuC,EAAU5F,OAAOmF,WAAa,CAC5B7D,EAAG,EACHC,EAAG,EACHC,EAAG,GAGLiE,EAAazF,OAAOmF,WAAa,CAC/B7D,EAAG,KACHC,EAAG,KACHC,EAAG,MAGLkE,EAAM1F,OAAOmF,WAAa,CACxB7D,EAAG,IACHC,EAAG,IACHC,EAAG,KAGLmE,EAAQ3F,OAAOmF,WAAa,CAC1B7D,EAAG,KACHC,EAAG,KACHC,EAAG,MAGLoE,EAAUlD,QAAU,SAAUe,GAE5B,GAAiB,oBAAbA,GAEe,oBAAbA,EAAiC,CACnC,IAAIzC,EAAYD,IAEhBwE,EAAK5B,MAAMtC,SAASuC,IAAI5C,EAAU,GAAI,EAAG,OAK/C0E,EAAMhD,QAAU,SAAUe,GAExB,GAAiB,oBAAbA,GAEe,oBAAbA,EAAiC,CACnC,IAAIzC,EAAYD,IAEhBsE,EAAU1B,MAAMtC,SAASuC,IAAI5C,EAAU,GAAI,IAAMA,EAAU,MAKjE2E,EAAQjD,QAAU,SAAUe,GAE1B,GAAiB,oBAAbA,GAEe,oBAAbA,EAAiC,CACnC,IAAIzC,EAAYD,IAEhBuE,EAAI3B,MAAMtC,SAASuC,KAAK,KAAM,EAAG5C,EAAU,MAKjD6E,EAAQnD,QAAU,SAAUe,GAE1B,GAAiB,oBAAbA,GAEe,oBAAbA,EAAiC,CACpC,IAAIzC,EAAYD,IAEfyE,EAAY7B,MAAMtC,SAASuC,KAAK,KAAM5C,EAAU,GAAI,OAiB1DwE,EAAY7B,MAAMmC,YAAa,EAC/B/G,QAAQC,IAAIwG,GAEZC,EAAa/C,QAAU,SAAUe,GAqC/B,IApBiB,qBAAbA,GAAoCN,EAAkB,GAAK,GAQvC,qBAAbM,GAAoCN,EAAkB,GAAK,IADpEA,IAae,oBAAbM,GAEe,oBAAbA,EAAiC,CACnC,IAAIzC,EAAYD,IAEhBqE,EAAUzB,MAAMtC,SAASuC,IAAI5C,EAAU,GAAI,EAAGA,EAAU,MAO9DqE,EAAU1B,MAAMtC,SAASuC,KAAK,MAAO,KAAO,MAC5CwB,EAAUzB,MAAMtC,SAASuC,KAAK,EAAG,EAAG,GACpCwB,EAAUzB,MAAMoC,SAASxE,EAAK,GAAKyE,KAAKC,GAAM,IAC9CV,EAAK5B,MAAMtC,SAASuC,KAAK,MAAO,EAAG,KACnC0B,EAAI3B,MAAMtC,SAASuC,KAAK,KAAM,EAAG,OACjC0B,EAAI3B,MAAMoC,SAASxE,EAAK,GAAKyE,KAAKC,GAAM,IACxCZ,EAAU1B,MAAMoC,SAASxE,EAAK,IAAMyE,KAAKC,GAAM,IAC/CT,EAAY7B,MAAMoC,SAASxE,EAAK,EAAIyE,KAAKC,GAAM,IAC/CT,EAAY7B,MAAMtC,SAASuC,KAAK,KAAM,EAAG,KAgCzCwB,EAAUzB,MAAMhC,SAAU,EAC1B0D,EAAU1B,MAAMhC,SAAU,EAC1B2D,EAAI3B,MAAMhC,SAAU,EACpB4D,EAAK5B,MAAMhC,SAAU,EASrB6D,EAAYhF,QAiCZ4D,EAAKF,OAAO,sBAAuB,EACnCE,EAAKF,OAAO,sBAAuB,EACnCE,EAAKF,OAAO,qBAAsB,EAElCuB,EAAavB,OAAO,sBAAuB,EAC3CuB,EAAavB,OAAO,qBAAsB,EAE1CyB,EAAQzB,OAAO,sBAAuB,EACtCyB,EAAQzB,OAAO,qBAAsB,EAErCwB,EAAMxB,OAAO,sBAAuB,EACpCwB,EAAMxB,OAAO,qBAAsB,EAEnC0B,EAAU1B,OAAO,sBAAuB,EACxC0B,EAAU1B,OAAO,qBAAsB,EAEvC2B,EAAQ3B,OAAO,sBAAuB,EACtC2B,EAAQ3B,OAAO,qBAAsB,EAyBrC,MAAMgC,EAAO,WACXC,sBAAsBD,GAGxB9B,EAAKd,SA/eW,GAAXiB,IAEDF,EAASI,GAAezE,OAAOoC,MAAQ,SACvCiC,EAASI,GAAenB,SAExBe,EAASG,GAAaxE,OAAOoC,MAAQ,SACrCiC,EAASG,GAAalB,WA4e1B4C","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","console.log(\"RUNNING RIGHT NOW2\");\r\n\r\nconst showcase = document.getElementById(\"showcase\") as HTMLIFrameElement;\r\nconst key = \"96296aaaf1964968ad92128f7469bd99\";\r\n\r\n// declare this file is a module\r\nexport {};\r\n\r\n// augment window with the MP_SDK property\r\ndeclare global {\r\n  interface Window {\r\n    MP_SDK: any;\r\n  }\r\n}\r\n\r\nshowcase.addEventListener(\"load\", async function () {\r\n  let sdk;\r\n  try {\r\n    sdk = await showcase.contentWindow.MP_SDK.connect(showcase, key, \"3.2\");\r\n  } catch (e) {\r\n    console.error(e);\r\n    return;\r\n  }\r\n\r\n  console.log(\"%c  Hello Bundle SDK! \", \"background: #333333; color: #00dd00\");\r\n  console.log(sdk);\r\n\r\n  //This allows for what we add to actually be seen\r\n  const lights = await sdk.Scene.createNode();\r\n  lights.addComponent(\"mp.lights\");\r\n  lights.start();\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //This is the Sum() example from the matterport.github.io page. This displays how to bind component inputs to outputs\r\n  //This is the architecture for defining, adding, and using components\r\n\r\n  //Define the component. I am not sure why it must be in the form of a function instead of a class\r\n  function Sum() {\r\n    this.inputs = {\r\n      augend: 0,\r\n      addend: 0,\r\n    };\r\n\r\n    this.outputs = {\r\n      sum: 0,\r\n    };\r\n\r\n    // if any input changes, recompute the sum.\r\n    this.onInputsUpdated = function () {\r\n      this.outputs.sum = this.inputs.augend + this.inputs.addend;\r\n    };\r\n  }\r\n\r\n  //This is the function that returns the new component. Necessary for adding it\r\n  function SumFactory() {\r\n    return new Sum();\r\n  }\r\n\r\n  //Quick display of the general structure and use of the sum component\r\n  var sum1 = SumFactory();\r\n  sum1.inputs.augend = 1;\r\n  sum1.inputs.addend = 99;\r\n  sum1.onInputsUpdated();\r\n  console.log(sum1.outputs.sum);\r\n\r\n  //This is how you register the component to add it later\r\n  sdk.Scene.register(\"sum\", SumFactory);\r\n\r\n  //This is how you add the component. Create a node and then add components. The components need to be in the same node\r\n  var node = await sdk.Scene.createNode();\r\n  var comp1 = node.addComponent(\"sum\");\r\n  var comp2 = node.addComponent(\"sum\");\r\n  var comp3 = node.addComponent(\"sum\");\r\n\r\n  // This binds comp2's augend to comp1's sum. The order of arguments can be a little confusing.\r\n  comp1.bind(\"augend\", comp2, \"sum\");\r\n  comp1.bind(\"addend\", comp3, \"sum\");\r\n\r\n  node.start();\r\n\r\n  comp2.inputs.augend = 5;\r\n  comp3.inputs.addend = 6;\r\n\r\n  //This is necessary and the order is important. The highest component in the architecture needs to be called alst.\r\n  comp2.onInputsUpdated();\r\n  comp3.onInputsUpdated();\r\n  comp1.onInputsUpdated();\r\n\r\n  console.log(\r\n      \"%c  \" + comp1.outputs.sum + \"  \",\r\n      \"background: #333333; color: #00dd00\"\r\n  );\r\n\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function getCursorPosition() {\r\n    var cartesian = [];\r\n    sdk.Pointer.intersection.subscribe(function (intersectionData) {\r\n      cartesian = [\r\n        intersectionData.position.x,\r\n        intersectionData.position.y,\r\n        intersectionData.position.z,\r\n        intersectionData.normal.x,\r\n        intersectionData.normal.y,\r\n        intersectionData.normal.z,\r\n\r\n      ];\r\n      //console.log(cartesian)\r\n    });\r\n\r\n    return cartesian;\r\n  }\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n  function Box() {\r\n    this.inputs = {\r\n      visible: true,\r\n\r\n    };\r\n\r\n    this.onInit = function () {\r\n      var THREE = this.context.three;\r\n      var geometry = new THREE.BoxGeometry(1, 1, 1);\r\n      this.material = new THREE.MeshPhongMaterial();\r\n      this.material.color = new THREE.Color(\"skyblue\");\r\n      var mesh = new THREE.Mesh(geometry, this.material);\r\n      this.outputs.objectRoot = mesh;\r\n      this.outputs.collider = mesh;\r\n    };\r\n\r\n    this.onEvent = function (type, data) {\r\n      /*      var THREE = this.context.three;\r\n      if (this.type === this.ComponentInteractionType.HOVER) {\r\n        this.material.color = new THREE.Color(\"red\");\r\n      }*/\r\n    };\r\n\r\n    this.onInputsUpdated = function (previous) {};\r\n\r\n    this.onTick = function (tickDelta) {};\r\n\r\n    this.onDestroy = function () {\r\n      this.material.dispose();\r\n    };\r\n  }\r\n\r\n  function BoxFactory() {\r\n    return new Box();\r\n  }\r\n\r\n  //var clickCount = 0;\r\n  var hoverCount = 0;\r\n  var hoverCountPlant = 0;\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //this renderable class is the box that is spawned. Also a three.js primitive\r\n  function Renderable() {\r\n    this.inputs = {\r\n      name: null,\r\n      visible: false,\r\n      color: \"yellow\",\r\n      opacity: 1,\r\n    };\r\n\r\n    this.update = function () {\r\n      const THREE = this.context.three;\r\n      this.material.color = new THREE.Color(this.inputs.color);\r\n      this.material.opacity = this.inputs.opacity;\r\n    }\r\n\r\n    this.onInit = function () {\r\n      const THREE = this.context.three;\r\n      //this.material = new THREE.MeshPhongMaterial();\r\n      var geometry = new THREE.BoxGeometry(.5, .5, .5);\r\n\r\n\r\n/*      var texture = new THREE.TextureLoader().load(\r\n        \"../BMcD/perspective-logo-large.png\"\r\n      );*/\r\n\r\n\r\n      this.material = new THREE.MeshLambertMaterial();\r\n      this.material.color = new THREE.Color(this.inputs.color);\r\n      this.material.transparent = true;\r\n      this.material.opacity = this.inputs.opacity;\r\n\r\n      var mesh = new THREE.Mesh(geometry, this.material);\r\n      this.outputs.objectRoot = mesh;\r\n      this.outputs.collider = mesh;\r\n\r\n      /*      var loader = new THREE.FontLoader();\r\n\r\n      loader.load(\"../bundle/fonts/mp-font.eot\", function (font) {\r\n        var geometry = new THREE.TextGeometry(\"Hello three.js!\", {\r\n          font: font,\r\n          size: 80,\r\n          height: 5,\r\n          curveSegments: 12,\r\n          bevelEnabled: true,\r\n          bevelThickness: 10,\r\n          bevelSize: 8,\r\n          bevelOffset: 0,\r\n          bevelSegments: 5,\r\n        });\r\n\r\n        this.material = new THREE.MeshLambertMaterial();\r\n        var mesh = new THREE.Mesh(geometry, this.material);\r\n        this.outputs.objectRoot = mesh;\r\n        this.outputs.collider = mesh;\r\n      });*/\r\n    };\r\n    this.onEvent = function (eventType: string) {\r\n      // console.log(eventType + \" count: \" + hoverCount);\r\n      const THREE = this.context.three;\r\n\r\n      //click events\r\n\r\n\r\n      /*if ((this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 == 0)) {\r\n        clickCount++;\r\n        console.log(\"Clickable component was clicked!\" + clickCount);\r\n        this.material.color = new THREE.Color(\"royalblue\");\r\n      } else if (\r\n        (this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 != 0)\r\n      ) {\r\n        clickCount++;\r\n        console.log(\"Clickable component was clicked!\" + clickCount);\r\n        this.material.color = new THREE.Color(\"white\");\r\n      }*/\r\n\r\n      //hover events\r\n      if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 == 0) {\r\n        this.material.color = new THREE.Color(this.inputs.color);\r\n        hoverCount++;\r\n      } else if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 != 0) {\r\n        this.inputs.color = \"royalblue\"\r\n        this.material.color = new THREE.Color(this.inputs.color);\r\n        hoverCount++;\r\n      }\r\n\r\n      //drag events (ha)\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        //changeColor();\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        here.obj3D.position.set(cartesian[0], 0.5, cartesian[2]);\r\n      }\r\n    };\r\n\r\n    this.onTick = function (tickDelta) {};\r\n\r\n  }\r\n\r\n\r\n  function rendyFactor() {\r\n    return new Renderable();\r\n  }\r\n  sdk.Scene.register(\"testy\", rendyFactor);\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/*  function Rack() {\r\n    this.inputs = {\r\n      name: null,\r\n      visible: false,\r\n      color: \"yellow\",\r\n      opacity: 1,\r\n    };\r\n\r\n    this.update = function () {\r\n      const THREE = this.context.three;\r\n      this.material.color = new THREE.Color(this.inputs.color);\r\n      this.material.opacity = this.inputs.opacity;\r\n    }\r\n\r\n    this.onInit = function () {\r\n\r\n    };\r\n    this.onEvent = function (eventType: string) {\r\n\r\n      if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 == 0) {\r\n        hoverCount++;\r\n      } else if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 != 0) {\r\n        hoverCount++;\r\n      }\r\n\r\n      //drag events (ha)\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        here.obj3D.position.set(cartesian[0], 0.5, cartesian[2]);\r\n      }\r\n    };\r\n\r\n    this.onTick = function (tickDelta) {};\r\n\r\n  }\r\n\r\n\r\n  function rackFactory() {\r\n    return new Rack();\r\n  }\r\n  sdk.Scene.register(\"testy\", rendyFactor);*/\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////\r\n  //this spawner will be where new stuff will be spawned. This is a three.js primitives\r\n\r\n  var spawnerPosition = [];\r\n\r\n  function Spawner() {\r\n    this.inputs = {\r\n      name: null,\r\n      visible: false,\r\n      color: \"white\",\r\n      opacity: 1,\r\n    };\r\n\r\n    this.update = function () {\r\n      const THREE = this.context.three;\r\n      this.material.color = new THREE.Color(this.inputs.color);\r\n      this.material.opacity = this.inputs.opacity;\r\n    }\r\n\r\n    this.onInit = function () {\r\n      const THREE = this.context.three;\r\n      //this.material = new THREE.MeshPhongMaterial();\r\n      var geometry = new THREE.CylinderGeometry(.5, .5, .01, 50);\r\n\r\n\r\n/*\r\n            var texture = new THREE.TextureLoader().load(\r\n              \"../BMcD/target.png\"\r\n            );\r\n\r\n*/\r\n\r\n      this.material = new THREE.MeshLambertMaterial();\r\n      this.material.color = new THREE.Color(this.inputs.color);\r\n      this.material.transparent = true;\r\n      this.material.opacity = this.inputs.opacity;\r\n\r\n      var mesh = new THREE.Mesh(geometry, this.material);\r\n      this.outputs.objectRoot = mesh;\r\n      this.outputs.collider = mesh;\r\n\r\n      /*      var loader = new THREE.FontLoader();\r\n\r\n      loader.load(\"../bundle/fonts/mp-font.eot\", function (font) {\r\n        var geometry = new THREE.TextGeometry(\"Hello three.js!\", {\r\n          font: font,\r\n          size: 80,\r\n          height: 5,\r\n          curveSegments: 12,\r\n          bevelEnabled: true,\r\n          bevelThickness: 10,\r\n          bevelSize: 8,\r\n          bevelOffset: 0,\r\n          bevelSegments: 5,\r\n        });\r\n\r\n        this.material = new THREE.MeshLambertMaterial();\r\n        var mesh = new THREE.Mesh(geometry, this.material);\r\n        this.outputs.objectRoot = mesh;\r\n        this.outputs.collider = mesh;\r\n      });*/\r\n    };\r\n    this.onEvent = function (eventType: string) {\r\n      // console.log(eventType + \" count: \" + hoverCount);\r\n     // const THREE = this.context.three;\r\n\r\n      //click events\r\n\r\n\r\n      /*if ((this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 == 0)) {\r\n        clickCount++;\r\n        console.log(\"Clickable component was clicked!\" + clickCount);\r\n        this.material.color = new THREE.Color(\"royalblue\");\r\n      } else if (\r\n        (this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 != 0)\r\n      ) {\r\n        clickCount++;\r\n        console.log(\"Clickable component was clicked!\" + clickCount);\r\n        this.material.color = new THREE.Color(\"white\");\r\n      }*/\r\n\r\n/*      //hover events\r\n      if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 == 0) {\r\n        this.material.color = new THREE.Color(this.inputs.color);\r\n        hoverCount++;\r\n      } else if (eventType == \"INTERACTION.HOVER\" && hoverCount % 2 != 0) {\r\n        this.inputs.color = \"royalblue\"\r\n        this.material.color = new THREE.Color(this.inputs.color);\r\n        hoverCount++;\r\n      }*/\r\n\r\n      //drag events (ha)\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        //changeColor();\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        spawnNode.obj3D.position.set(cartesian[0], 0, cartesian[2]);\r\n        spawnerPosition = cartesian;\r\n      }\r\n    };\r\n\r\n    this.onTick = function (tickDelta) {};\r\n\r\n  }\r\n\r\n\r\n  function spawnFactor() {\r\n    return new Spawner();\r\n  }\r\n  sdk.Scene.register(\"spawn\", spawnFactor);\r\n\r\n  const spawnNode = await sdk.Scene.createNode();\r\n\r\n  const spawner = spawnNode.addComponent(\"spawn\");\r\n  spawner.events[\"INTERACTION.HOVER\"] = true;\r\n  spawner.events[\"INTERACTION.DRAG\"] = true;\r\n  spawner.events[\"INTERACTION.CLICK\"] = true;\r\n\r\n  spawnNode.obj3D.position.set(-6, 0, 5.5)\r\n  spawner.inputs.opacity = 1;\r\n  spawnNode.start();\r\n  //end of spawner definition\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\n  document.getElementById(\"clickMe\").onclick = function changeColor() {\r\n    console.log(\"color change\")\r\n    bull.inputs.color = \"green\";\r\n  }\r\n\r\n\r\n  document.getElementById(\"clickMe2\").onclick = function appear() {\r\n    if(bull.inputs.opacity != 1) {\r\n      while (bull.inputs.opacity < 1) {\r\n        bull.inputs.opacity = bull.inputs.opacity + .0001;\r\n        bull.update();\r\n        console.log(\"while \" + bull.inputs.opacity)\r\n      }\r\n    }\r\n  }\r\n\r\n  document.getElementById(\"clickMe3\").onclick = function disappear() {\r\n      bull.inputs.opacity = 0;\r\n  }\r\n\r\n  var boxArray = [];\r\n  var nodeArray = [];\r\n  var boxIndex = 0;\r\n  var boxSelected = 0;\r\n  var pastSelection = 0;\r\n\r\n  document.getElementById(\"clickMe4\").onclick = async function newBox() {\r\n    console.log(\"Box Selected: \" + boxSelected + \"\\n\" + \"Box Index: \" + boxIndex )\r\n\r\n    nodeArray[boxIndex] = await sdk.Scene.createNode();\r\n    boxArray[boxIndex] = nodeArray[boxIndex].addComponent(\"testy\");\r\n    nodeArray[boxIndex].obj3D.position.set(spawnerPosition[0], .5, spawnerPosition[2]);\r\n    boxArray[boxIndex].inputs.color = \"yellow\";\r\n    boxArray[boxIndex].events[\"INTERACTION.HOVER\"] = true;\r\n    boxArray[boxIndex].events[\"INTERACTION.DRAG\"] = true;\r\n    boxArray[boxIndex].events[\"INTERACTION.CLICK\"] = true;\r\n    boxArray[boxIndex].inputs.name = boxIndex;\r\n\r\n    boxArray[boxIndex].onEvent = function (eventType: string) {\r\n      if (eventType == \"INTERACTION.CLICK\") {\r\n        pastSelection = boxSelected;\r\n        boxSelected = this.inputs.name;\r\n        console.log(boxSelected)\r\n        //boxSelected = boxIndex;\r\n        //boxArray[boxSelected].inputs.color = \"blue\";\r\n      }\r\n\r\n        if (eventType == \"INTERACTION.DRAG\") {\r\n          //boxArray[boxIndex].inputs.color = \"blue\";\r\n          console.log(boxIndex)\r\n\r\n          var cartesian = getCursorPosition();\r\n          //console.log(cartesian);\r\n          nodeArray[boxSelected].obj3D.position.set(cartesian[0], .5, cartesian[2]);\r\n        }\r\n\r\n    };\r\n\r\n    nodeArray[boxIndex].start()\r\n  boxIndex++;\r\n  }\r\n\r\n  document.getElementById(\"clickMe5\").onclick = async function deleteBox() {\r\n    console.log(nodeArray)\r\n    nodeArray[boxSelected].stop();\r\n    console.log(nodeArray)\r\n\r\n  }\r\n\r\n    function updateSelection() {\r\n    if(boxIndex !=0)\r\n    {\r\n      boxArray[pastSelection].inputs.color = \"yellow\";\r\n      boxArray[pastSelection].update();\r\n\r\n      boxArray[boxSelected].inputs.color = \"orange\"\r\n      boxArray[boxSelected].update();\r\n    }\r\n}\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  var rackArray = [];\r\n  var rackNodeArray = [];\r\n  var rackIndex = 0;\r\n  var rackSelected = 0;\r\n  var pastRackSelection = 0;\r\n\r\n\r\n  document.getElementById(\"clickMe6\").onclick = async function newRack() {\r\n\r\n    rackNodeArray[rackIndex] = await sdk.Scene.createNode();\r\n    rackArray[rackIndex] = rackNodeArray[rackIndex].addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n      url: \"./fbx/Telecom/Telecom.fbx\",\r\n    });\r\n\r\n    rackArray[rackIndex].inputs.localScale = {\r\n      x: 0.022,\r\n      y: 0.022,\r\n      z: 0.022,\r\n    };\r\n\r\n    rackNodeArray[rackIndex].obj3D.position.set(spawnerPosition[0], 0, spawnerPosition[2]);\r\n    rackArray[rackIndex].events[\"INTERACTION.HOVER\"] = true;\r\n    rackArray[rackIndex].events[\"INTERACTION.DRAG\"] = true;\r\n    rackArray[rackIndex].events[\"INTERACTION.CLICK\"] = true;\r\n    rackArray[rackIndex].name = rackIndex;\r\n    console.log(rackArray[rackIndex].name);\r\n    console.log(rackArray[rackIndex]);\r\n\r\n\r\n    rackArray[rackIndex].onEvent = function (eventType: string) {\r\n      if (eventType == \"INTERACTION.CLICK\") {\r\n        pastRackSelection = rackSelected;\r\n        console.log(pastRackSelection);\r\n        rackSelected = this.name;\r\n        console.log(rackSelected)\r\n        //boxSelected = boxIndex;\r\n        //boxArray[boxSelected].inputs.color = \"blue\";\r\n      }\r\n\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n\r\n        if(cartesian[3] == 1 || cartesian[3] ==  -1)\r\n        {\r\n          rackNodeArray[rackSelected].obj3D.position.z = cartesian[2];\r\n\r\n        }\r\n\r\n        if(cartesian[4] == 1)\r\n        {\r\n          rackNodeArray[rackSelected].obj3D.position.set(cartesian[0], 0, cartesian[2])\r\n        }\r\n\r\n\r\n        if(cartesian[5] == 1 || cartesian[5] ==  -1)\r\n        {\r\n          rackNodeArray[rackSelected].obj3D.position.x = cartesian[0];\r\n        }\r\n\r\n\r\n        //boxArray[boxIndex].inputs.color = \"blue\";\r\n        console.log(rackIndex)\r\n\r\n        //console.log(cartesian);\r\n        console.log(sdk.Pointer)\r\n       // rackNodeArray[rackSelected].obj3D.position.set(cartesian[0], 0, cartesian[2]);\r\n      }\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    rackNodeArray[rackIndex].start();\r\n    rackIndex++;\r\n\r\n  }\r\n\r\n\r\n  document.getElementById(\"clickMe7\").onclick = async function deleteRack() {\r\n    console.log(rackArray)\r\n    rackNodeArray[rackSelected].stop();\r\n    console.log(rackArray)\r\n\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/*\r\n\r\n  var rackArray = [];\r\n  var rackNodeArray = [];\r\n  var rackIndex = 0;\r\n  var rackSelected = 0;\r\n  var pastRackSelection = 0;\r\n\r\n  document.getElementById(\"clickMe4\").onclick = async function newBox() {\r\n    console.log(\"Box Selected: \" + rackSelected + \"\\n\" + \"Box Index: \" + rackIndex )\r\n\r\n    rackNodeArray[rackIndex] = await sdk.Scene.createNode();\r\n    rackArray[rackIndex] = rackNodeArray[rackIndex].addComponent(\"testy\");\r\n    rackNodeArray[rackIndex].obj3D.position.set(spawnerPosition[0], .5, spawnerPosition[2]);\r\n    rackArray[rackIndex].inputs.color = \"yellow\";\r\n    rackArray[rackIndex].events[\"INTERACTION.HOVER\"] = true;\r\n    rackArray[rackIndex].events[\"INTERACTION.DRAG\"] = true;\r\n    rackArray[rackIndex].events[\"INTERACTION.CLICK\"] = true;\r\n    rackArray[rackIndex].inputs.name = rackIndex;\r\n\r\n    rackArray[rackIndex].onEvent = function (eventType: string) {\r\n      if (eventType == \"INTERACTION.CLICK\") {\r\n        pastRackSelection = rackSelected;\r\n        rackSelected = this.inputs.name;\r\n        console.log(rackSelected)\r\n        //rackSelected = rackIndex;\r\n        //rackArray[rackSelected].inputs.color = \"blue\";\r\n      }\r\n\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        //rackArray[rackIndex].inputs.color = \"blue\";\r\n        console.log(rackIndex)\r\n\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        rackNodeArray[rackSelected].obj3D.position.set(cartesian[0], .5, cartesian[2]);\r\n      }\r\n\r\n    };\r\n\r\n    rackNodeArray[rackIndex].start()\r\n    rackIndex++;\r\n  }\r\n\r\n\r\n  document.getElementById(\"clickMe5\").onclick = async function deleteBox() {\r\n    console.log(nodeArray)\r\n    rackNodeArray[rackSelected].stop();\r\n  }\r\n\r\n  function updateSelection() {\r\n    if(rackIndex !=0)\r\n    {\r\n      rackArray[pastRackSelection].inputs.color = \"yellow\";\r\n      rackArray[pastRackSelection].update();\r\n\r\n      rackArray[rackSelected].inputs.color = \"orange\"\r\n      rackArray[rackSelected].update();\r\n    }\r\n  }\r\n\r\n*/\r\n\r\n\r\n  // Registering the component with the sdk\r\n  sdk.Scene.register(\"box\", BoxFactory);\r\n\r\n  //Necessary for adding objects. This is what will actually\r\n  //put our 3D object into our space\r\n  const modelNode = await sdk.Scene.createNode();\r\n  const littleGuy = await sdk.Scene.createNode();\r\n  const fan = await sdk.Scene.createNode();\r\n  const wall = await sdk.Scene.createNode();\r\n  const voltageNode = await sdk.Scene.createNode();\r\n // const cboNode = await sdk.Scene.createNode();\r\n\r\n\r\n\r\n  // const test = await sdk.Scene.createNode();\r\n\r\n  const here = await sdk.Scene.createNode();\r\n\r\n  const bull = here.addComponent(\"testy\");\r\n\r\n  here.obj3D.position.set(-5, .5, 5.5);\r\n  here.start();\r\n  // Store the fbx component since we will need to adjust it in the next step.\r\n  //Object is stored inside of the project\r\n  //The url could be some internet address where it is stored\r\n  //this leads to a potted plant\r\n  const fbxComponent = modelNode.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/Telecom/Telecom.fbx\",\r\n  });\r\n  const fella = littleGuy.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/Nokia/Nokia.fbx\",\r\n  });\r\n\r\n  const fanster = fan.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/Sageon/Sageon.fbx\",\r\n  });\r\n  const powerWall = wall.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/Wall/Wall.fbx\",\r\n  });\r\n\r\n  const voltage = voltageNode.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/randy/voltage.fbx\",\r\n  });\r\n\r\n/*\r\n  const cbo = cboNode.addComponent(sdk.Scene.Component.FBX_LOADER, {\r\n    url: \"./fbx/hawk/hawk+Logo.fbx\",\r\n  });\r\n*/\r\n\r\n  //const testtest = test.addComponent(\"box\");\r\n\r\n  //Adjsut the scale of the plant. I do not know any better way than tuning right now\r\n\r\n  voltageNode.obj3D.transparent = true;\r\n  voltageNode.obj3D.opacity = .5;\r\n\r\n/*\r\n  cbo.inputs.localScale = {\r\n    x: .5,\r\n    y: .5,\r\n    z: .5,\r\n  };\r\n*/\r\n\r\n\r\n  powerWall.inputs.localScale = {\r\n    x: 1,\r\n    y: 1,\r\n    z: 1,\r\n  };\r\n\r\n  fbxComponent.inputs.localScale = {\r\n    x: 0.022,\r\n    y: 0.022,\r\n    z: 0.022,\r\n  };\r\n\r\n  fella.inputs.localScale = {\r\n    x: 0.02,\r\n    y: 0.02,\r\n    z: 0.02,\r\n  };\r\n\r\n  fanster.inputs.localScale = {\r\n    x: 0.001,\r\n    y: 0.001,\r\n    z: 0.001,\r\n  };\r\n\r\n  powerWall.onEvent = function (eventType: string) {\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        wall.obj3D.position.set(cartesian[0], 0, 5.2);\r\n      }\r\n    }\r\n  };\r\n\r\n  fella.onEvent = function (eventType: string) {\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        littleGuy.obj3D.position.set(cartesian[0], 0.75, cartesian[2]);\r\n      }\r\n    }\r\n  };\r\n\r\n  fanster.onEvent = function (eventType: string) {\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        fan.obj3D.position.set(-10.6, 0, cartesian[2]);\r\n      }\r\n    }\r\n  };\r\n\r\n  voltage.onEvent = function (eventType: string) {\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n       var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        voltageNode.obj3D.position.set(-2.75, cartesian[1], 4.8);\r\n      }\r\n    }\r\n  };\r\n/*\r\n  cbo.onEvent = function (eventType: string) {\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        cboNode.obj3D.position.set(cartesian[0], 0, cartesian[2]);\r\n      }\r\n    }\r\n  };*/\r\n\r\n  voltageNode.obj3D.castShadow = true;\r\n  console.log(voltageNode)\r\n\r\n  fbxComponent.onEvent = function (eventType: string) {\r\n    // console.log(eventType + \" count: \" + hoverCount);\r\n\r\n    //click events\r\n    /*if ((this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 == 0)) {\r\n      clickCount++;\r\n      console.log(\"Clickable component was clicked!\" + clickCount);\r\n      this.material.color = new THREE.Color(\"royalblue\");\r\n    } else if (\r\n      (this.eventType = \"INTERACTION.CLICK\" && clickCount % 2 != 0)\r\n    ) {\r\n      clickCount++;\r\n      console.log(\"Clickable component was clicked!\" + clickCount);\r\n      this.material.color = new THREE.Color(\"white\");\r\n    }*/\r\n\r\n    //hover events\r\n    if (eventType == \"INTERACTION.HOVER\" && hoverCountPlant % 2 == 0) {\r\n      /* console.log(\"yerp\");\r\n      fbxComponent.inputs.localScale = {\r\n        x: 0.022 * 1.1,\r\n        y: 0.022 * 1.1,\r\n        z: 0.022 * 1.1,\r\n      };*/\r\n      hoverCountPlant++;\r\n    } else if (eventType == \"INTERACTION.HOVER\" && hoverCountPlant % 2 != 0) {\r\n      //this.material.color = new THREE.Color(\"royalblue\");\r\n      /* console.log(\"yerp1\");\r\n      fbxComponent.inputs.localScale = {\r\n        x: 0.022 / 1.1,\r\n        y: 0.022 / 1.1,\r\n        z: 0.022 / 1.1,\r\n      };*/\r\n      hoverCountPlant++;\r\n    }\r\n\r\n    //drag events (ha)\r\n    if (eventType == \"INTERACTION.DRAG\") {\r\n      //console.log(cartesian);\r\n      if (eventType == \"INTERACTION.DRAG\") {\r\n        var cartesian = getCursorPosition();\r\n        //console.log(cartesian);\r\n        modelNode.obj3D.position.set(cartesian[0], 0, cartesian[2]);\r\n      }\r\n    }\r\n  };\r\n\r\n  //Location of the plant. X is \"left and right\", Y is \"up and down\", Z is \"Forward and back\"\r\n  // Relative to \"spawn\" location of the viewer. If you move those relations will not hold\r\n  littleGuy.obj3D.position.set(-1.135, 0.763, 0.777);\r\n  modelNode.obj3D.position.set(-7, 0, 7);\r\n  modelNode.obj3D.rotation.y = (90 * Math.PI) / 180;\r\n  wall.obj3D.position.set(-2.559, 0, 5.2);\r\n  fan.obj3D.position.set(-10.6, 0, 4.097);\r\n  fan.obj3D.rotation.y = (90 * Math.PI) / 180;\r\n  littleGuy.obj3D.rotation.y = (180 * Math.PI) / 180;\r\n  voltageNode.obj3D.rotation.y = (0 * Math.PI) / 180;\r\n  voltageNode.obj3D.position.set(-2.75, 1, 4.8)\r\n // cboNode.obj3D.position.set(-4, 0, 6.5)\r\n  //test.obj3D.position.set(-6.5, 0.5, 1.21);\r\n // cboNode.obj3D.rotation.y = Math.PI/2;\r\n\r\n\r\n/*\r\n  sdk.Pointer.intersection.subscribe(function (intersectionData) {\r\n    // Changes to the intersection data have occurred.\r\n    document.getElementById(\"demo\").innerHTML =\r\n        \"X position : \" +\r\n        Number.parseFloat(intersectionData.position.x).toFixed(3) +\r\n        \" m\" +\r\n        \"<br/>\" +\r\n        \"Y position : \" +\r\n        Number.parseFloat(intersectionData.position.y).toFixed(3) +\r\n        \" m\" +\r\n        \"<br/>\" +\r\n        \"Z position : \" +\r\n        Number.parseFloat(intersectionData.position.z).toFixed(3) +\r\n        \" m\";\r\n  });\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n  //Rot is for the ultra-impressive cosine rotation\r\n  //the .start() is what will actually add the object inside the node to scene\r\n\r\n  modelNode.obj3D.visible = false;\r\n  littleGuy.obj3D.visible = false;\r\n  fan.obj3D.visible = false;\r\n  wall.obj3D.visible = false;\r\n\r\n/*\r\n  modelNode.start();\r\n  littleGuy.start();\r\n  fan.start();\r\n  wall.start();\r\n*/\r\n\r\n  voltageNode.start();\r\n  //cboNode.start();\r\n  //test.start();\r\n\r\n  /* sdk.Mattertag.add([{\r\n     label: \"New tag\",\r\n     description: \"This tag was added through the Matterport SDK\",\r\n     anchorPosition : {\r\n       x: 0,\r\n       y: 0,\r\n       z: 0,\r\n     },\r\n     stemVector: { // make the Mattertag stick straight up and make it 0.30 meters (~1 foot) tall\r\n       x: 0,\r\n       y: 0.30,\r\n       z: 0,\r\n     },\r\n     color: { // blue disc\r\n       r: 0.0,\r\n       g: 0.0,\r\n       b: 1.0,\r\n     },\r\n     //floorId?: number, // optional, if not specified the sdk will provide an estimate of the floor id for the anchor position provided.\r\n   }])\r\n */\r\n\r\n  //This runs constantly to allow for animation. I am still unfamiliar with this\r\n  //It is called recursively though, so I think anything after this will not be reached\r\n  // The above is FALSE, it will read past this function. But I think it is still recursive because\r\n  //If a console.log() statement is put inside it is logged hundreds of times\r\n\r\n  //console.log(bull.events[\"INTERACTION.CLICK\"]);\r\n\r\n  bull.events[\"INTERACTION.CLICK\"] = true;\r\n  bull.events[\"INTERACTION.HOVER\"] = true;\r\n  bull.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n  fbxComponent.events[\"INTERACTION.HOVER\"] = true;\r\n  fbxComponent.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n  fanster.events[\"INTERACTION.HOVER\"] = true;\r\n  fanster.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n  fella.events[\"INTERACTION.HOVER\"] = true;\r\n  fella.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n  powerWall.events[\"INTERACTION.HOVER\"] = true;\r\n  powerWall.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n  voltage.events[\"INTERACTION.HOVER\"] = true;\r\n  voltage.events[\"INTERACTION.DRAG\"] = true;\r\n\r\n/*\r\n  let objects = [];\r\n  try {\r\n    objects = await sdk.Scene.query(['scene']);\r\n  }\r\n  catch(e) {\r\n    console.log(e);\r\n  }\r\n\r\n  const node1 = await sdk.Scene.createNode();\r\n  document.getElementById(\"demo\").innerHTML = node1.addComponent('mp.transformControls', {\r\n    scene: objects,\r\n  });\r\n  node.start();\r\n*/\r\n\r\n//    setScene(objects);;\r\n\r\n\r\n/*  cbo.events[\"INTERACTION.HOVER\"] = true;\r\n  cbo.events[\"INTERACTION.DRAG\"] = true;*/\r\n\r\n\r\n  const tick = function () {\r\n    requestAnimationFrame(tick);\r\n    //fan.obj3D.rotation.y = rot;\r\n    // rot = rot + 0.02\r\n  bull.update();\r\n  updateSelection();\r\n  };\r\n  tick();\r\n});\r\n"],"sourceRoot":""}